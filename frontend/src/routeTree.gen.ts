/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as ResetPasswordImport } from './routes/reset-password'
import { Route as RecoverPasswordImport } from './routes/recover-password'
import { Route as LoginImport } from './routes/login'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as LayoutSimulationImport } from './routes/_layout/simulation'
import { Route as LayoutSettingsImport } from './routes/_layout/settings'
import { Route as LayoutItemsImport } from './routes/_layout/items'
import { Route as LayoutChatImport } from './routes/_layout/chat'
import { Route as LayoutAdminImport } from './routes/_layout/admin'
import { Route as LayoutSimulationWorldsImport } from './routes/_layout/simulation/worlds'
import { Route as LayoutSimulationScenariosImport } from './routes/_layout/simulation/scenarios'
import { Route as LayoutSimulationAnalysisImport } from './routes/_layout/simulation/analysis'
import { Route as LayoutSimulationAgentsImport } from './routes/_layout/simulation/agents'
import { Route as LayoutSimulationScenarioScenarioIdImport } from './routes/_layout/simulation/scenario/$scenarioId'

// Create/Update Routes

const SignupRoute = SignupImport.update({
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const ResetPasswordRoute = ResetPasswordImport.update({
  path: '/reset-password',
  getParentRoute: () => rootRoute,
} as any)

const RecoverPasswordRoute = RecoverPasswordImport.update({
  path: '/recover-password',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutSimulationRoute = LayoutSimulationImport.update({
  path: '/simulation',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutSettingsRoute = LayoutSettingsImport.update({
  path: '/settings',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutItemsRoute = LayoutItemsImport.update({
  path: '/items',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutChatRoute = LayoutChatImport.update({
  path: '/chat',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutAdminRoute = LayoutAdminImport.update({
  path: '/admin',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutSimulationWorldsRoute = LayoutSimulationWorldsImport.update({
  path: '/worlds',
  getParentRoute: () => LayoutSimulationRoute,
} as any)

const LayoutSimulationScenariosRoute = LayoutSimulationScenariosImport.update({
  path: '/scenarios',
  getParentRoute: () => LayoutSimulationRoute,
} as any)

const LayoutSimulationAnalysisRoute = LayoutSimulationAnalysisImport.update({
  path: '/analysis',
  getParentRoute: () => LayoutSimulationRoute,
} as any)

const LayoutSimulationAgentsRoute = LayoutSimulationAgentsImport.update({
  path: '/agents',
  getParentRoute: () => LayoutSimulationRoute,
} as any)

const LayoutSimulationScenarioScenarioIdRoute =
  LayoutSimulationScenarioScenarioIdImport.update({
    path: '/scenario/$scenarioId',
    getParentRoute: () => LayoutSimulationRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/recover-password': {
      preLoaderRoute: typeof RecoverPasswordImport
      parentRoute: typeof rootRoute
    }
    '/reset-password': {
      preLoaderRoute: typeof ResetPasswordImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/_layout/admin': {
      preLoaderRoute: typeof LayoutAdminImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/chat': {
      preLoaderRoute: typeof LayoutChatImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/items': {
      preLoaderRoute: typeof LayoutItemsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/settings': {
      preLoaderRoute: typeof LayoutSettingsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/simulation': {
      preLoaderRoute: typeof LayoutSimulationImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/': {
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/simulation/agents': {
      preLoaderRoute: typeof LayoutSimulationAgentsImport
      parentRoute: typeof LayoutSimulationImport
    }
    '/_layout/simulation/analysis': {
      preLoaderRoute: typeof LayoutSimulationAnalysisImport
      parentRoute: typeof LayoutSimulationImport
    }
    '/_layout/simulation/scenarios': {
      preLoaderRoute: typeof LayoutSimulationScenariosImport
      parentRoute: typeof LayoutSimulationImport
    }
    '/_layout/simulation/worlds': {
      preLoaderRoute: typeof LayoutSimulationWorldsImport
      parentRoute: typeof LayoutSimulationImport
    }
    '/_layout/simulation/scenario/$scenarioId': {
      preLoaderRoute: typeof LayoutSimulationScenarioScenarioIdImport
      parentRoute: typeof LayoutSimulationImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  LayoutRoute.addChildren([
    LayoutAdminRoute,
    LayoutChatRoute,
    LayoutItemsRoute,
    LayoutSettingsRoute,
    LayoutSimulationRoute.addChildren([
      LayoutSimulationAgentsRoute,
      LayoutSimulationAnalysisRoute,
      LayoutSimulationScenariosRoute,
      LayoutSimulationWorldsRoute,
      LayoutSimulationScenarioScenarioIdRoute,
    ]),
    LayoutIndexRoute,
  ]),
  LoginRoute,
  RecoverPasswordRoute,
  ResetPasswordRoute,
  SignupRoute,
])

/* prettier-ignore-end */
